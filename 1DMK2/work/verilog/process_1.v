/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module process_1 (
    input clk,
    input rst,
    input start,
    input joystickaUp,
    input joystickaDown,
    input joystickaLeft,
    input joystickaRight,
    input joystickbUp,
    input joystickbDown,
    input joystickbLeft,
    input joystickbRight,
    output reg r0,
    output reg g0,
    output reg bl0,
    output reg r1,
    output reg g1,
    output reg bl1,
    output reg latch,
    output reg blank,
    output reg [3:0] rowsel,
    output reg dclk
  );
  
  
  
  localparam SPEED = 2'h3;
  
  reg [15:0] M_gclk_d, M_gclk_q = 1'h0;
  
  reg [31:0] M_growclk_d, M_growclk_q = 1'h0;
  
  reg [18:0] M_sclk_d, M_sclk_q = 19'h61a80;
  
  localparam GROWTH = 3'h4;
  
  localparam APPLE = 4'ha;
  
  localparam COLLIDE = 3'h5;
  
  localparam KILL = 4'hf;
  
  reg [319:0] M_arow_d, M_arow_q = 1'h0;
  
  reg [383:0] M_acol_d, M_acol_q = 1'h0;
  
  reg [319:0] M_brow_d, M_brow_q = 1'h0;
  
  reg [383:0] M_bcol_d, M_bcol_q = 1'h0;
  
  reg [63:0] M_atop_d, M_atop_q = 1'h0;
  
  reg [63:0] M_abot_d, M_abot_q = 1'h0;
  
  reg [63:0] M_btop_d, M_btop_q = 1'h0;
  
  reg [63:0] M_bbot_d, M_bbot_q = 1'h0;
  
  reg [5:0] M_alen_d, M_alen_q = 1'h0;
  
  reg [5:0] M_blen_d, M_blen_q = 1'h0;
  
  reg [0:0] M_alethal_d, M_alethal_q = 1'h1;
  
  reg [0:0] M_blethal_d, M_blethal_q = 1'h1;
  
  reg [4:0] M_approw_d, M_approw_q = 1'h0;
  
  reg [5:0] M_appcol_d, M_appcol_q = 1'h0;
  
  reg M_walltop_d, M_walltop_q = 1'h0;
  
  reg M_wallbot_d, M_wallbot_q = 1'h0;
  
  reg M_appletop_d, M_appletop_q = 1'h0;
  
  reg M_applebot_d, M_applebot_q = 1'h0;
  
  reg M_rtop_d, M_rtop_q = 1'h0;
  
  reg M_rbot_d, M_rbot_q = 1'h0;
  
  reg [3:0] M_adirection_d, M_adirection_q = 4'h4;
  
  reg [3:0] M_bdirection_d, M_bdirection_q = 4'h1;
  
  reg [1:0] M_lastaDirection_d, M_lastaDirection_q = 2'h2;
  
  reg [1:0] M_lastbDirection_d, M_lastbDirection_q = 2'h0;
  
  reg [7:0] M_ascore_d, M_ascore_q = 8'h00;
  
  reg [7:0] M_bscore_d, M_bscore_q = 8'h00;
  
  reg [7:0] M_aaddscore_d, M_aaddscore_q = 8'h00;
  
  reg [7:0] M_baddscore_d, M_baddscore_q = 8'h00;
  
  reg [7:0] M_aapplescore_d, M_aapplescore_q = 8'h00;
  
  reg [7:0] M_bapplescore_d, M_bapplescore_q = 8'h00;
  
  reg [7:0] M_asubscore_d, M_asubscore_q = 8'h00;
  
  reg [7:0] M_bsubscore_d, M_bsubscore_q = 8'h00;
  
  reg [19:0] M_counter_d, M_counter_q = 1'h0;
  
  integer count;
  
  reg M_move_d, M_move_q = 1'h0;
  
  reg [1:0] adir;
  
  reg [1:0] bdir;
  
  reg [3:0] row;
  
  reg [6:0] col;
  
  reg [4:0] M_randrow_d, M_randrow_q = 1'h0;
  
  reg [5:0] M_randcol_d, M_randcol_q = 1'h0;
  
  reg [0:0] M_cmp_d, M_cmp_q = 1'h0;
  
  reg aonetop;
  
  reg aonebot;
  
  reg atentop;
  
  reg atenbot;
  
  reg bonetop;
  
  reg bonebot;
  
  reg btentop;
  
  reg btenbot;
  
  wire [4-1:0] M_control_rowOut;
  wire [7-1:0] M_control_colOut;
  reg [1-1:0] M_control_clk;
  reg [1-1:0] M_control_rst;
  control_3 control (
    .clk(M_control_clk),
    .rst(M_control_rst),
    .rowOut(M_control_rowOut),
    .colOut(M_control_colOut)
  );
  
  wire [11-1:0] M_alu_out;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_c;
  alu_4 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .c(M_alu_c),
    .out(M_alu_out)
  );
  
  wire [10-1:0] M_pn_num;
  reg [1-1:0] M_pn_clk;
  reg [1-1:0] M_pn_rst;
  reg [1-1:0] M_pn_next;
  reg [32-1:0] M_pn_seed;
  pn_gen_5 pn (
    .clk(M_pn_clk),
    .rst(M_pn_rst),
    .next(M_pn_next),
    .seed(M_pn_seed),
    .num(M_pn_num)
  );
  
  wire [1-1:0] M_drawer_aonetop;
  wire [1-1:0] M_drawer_aonebot;
  wire [1-1:0] M_drawer_atentop;
  wire [1-1:0] M_drawer_atenbot;
  wire [1-1:0] M_drawer_bonetop;
  wire [1-1:0] M_drawer_bonebot;
  wire [1-1:0] M_drawer_btentop;
  wire [1-1:0] M_drawer_btenbot;
  reg [5-1:0] M_drawer_row;
  reg [7-1:0] M_drawer_col;
  reg [8-1:0] M_drawer_ascore;
  reg [8-1:0] M_drawer_bscore;
  drawer_6 drawer (
    .row(M_drawer_row),
    .col(M_drawer_col),
    .ascore(M_drawer_ascore),
    .bscore(M_drawer_bscore),
    .aonetop(M_drawer_aonetop),
    .aonebot(M_drawer_aonebot),
    .atentop(M_drawer_atentop),
    .atenbot(M_drawer_atenbot),
    .bonetop(M_drawer_bonetop),
    .bonebot(M_drawer_bonebot),
    .btentop(M_drawer_btentop),
    .btenbot(M_drawer_btenbot)
  );
  
  always @* begin
    M_abot_d = M_abot_q;
    M_baddscore_d = M_baddscore_q;
    M_blen_d = M_blen_q;
    M_aapplescore_d = M_aapplescore_q;
    M_atop_d = M_atop_q;
    M_randcol_d = M_randcol_q;
    M_applebot_d = M_applebot_q;
    M_cmp_d = M_cmp_q;
    M_adirection_d = M_adirection_q;
    M_sclk_d = M_sclk_q;
    M_arow_d = M_arow_q;
    M_rbot_d = M_rbot_q;
    M_approw_d = M_approw_q;
    M_bcol_d = M_bcol_q;
    M_randrow_d = M_randrow_q;
    M_lastbDirection_d = M_lastbDirection_q;
    M_rtop_d = M_rtop_q;
    M_asubscore_d = M_asubscore_q;
    M_bscore_d = M_bscore_q;
    M_bbot_d = M_bbot_q;
    M_brow_d = M_brow_q;
    M_bsubscore_d = M_bsubscore_q;
    M_move_d = M_move_q;
    M_appcol_d = M_appcol_q;
    M_lastaDirection_d = M_lastaDirection_q;
    M_appletop_d = M_appletop_q;
    M_bapplescore_d = M_bapplescore_q;
    M_counter_d = M_counter_q;
    M_growclk_d = M_growclk_q;
    M_acol_d = M_acol_q;
    M_blethal_d = M_blethal_q;
    M_aaddscore_d = M_aaddscore_q;
    M_alen_d = M_alen_q;
    M_bdirection_d = M_bdirection_q;
    M_walltop_d = M_walltop_q;
    M_alethal_d = M_alethal_q;
    M_gclk_d = M_gclk_q;
    M_ascore_d = M_ascore_q;
    M_btop_d = M_btop_q;
    M_wallbot_d = M_wallbot_q;
    
    M_gclk_d = M_gclk_q + 1'h1;
    M_growclk_d = M_growclk_q + 1'h1;
    M_counter_d = M_counter_q + 1'h1;
    if (M_sclk_q > 10'h3e8) begin
      M_sclk_d = M_sclk_q - 1'h1;
    end else begin
      M_sclk_d = M_sclk_q;
    end
    if (M_growclk_q[31+0-:1]) begin
      M_alen_d = M_alen_q + 1'h1;
      M_blen_d = M_blen_q + 1'h1;
      M_growclk_d = 1'h0;
    end
    if ((M_counter_q >= 18'h30d40) && (M_counter_q > M_sclk_q)) begin
      M_move_d = 1'h1;
      M_counter_d = 1'h0;
    end else begin
      M_move_d = 1'h0;
    end
    M_control_clk = M_gclk_q[3+0-:1];
    M_control_rst = rst;
    row = M_control_rowOut;
    col = M_control_colOut;
    M_pn_clk = clk;
    M_pn_rst = rst;
    M_pn_seed = 1'h0;
    M_pn_next = 1'h1;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_c = 1'h0;
    M_drawer_row = row;
    M_drawer_col = col;
    M_drawer_ascore = M_ascore_q;
    M_drawer_bscore = M_bscore_q;
    M_adirection_d = M_adirection_q;
    M_bdirection_d = M_bdirection_q;
    M_alethal_d = M_alethal_q;
    M_blethal_d = M_blethal_q;
    M_ascore_d = M_ascore_q;
    M_bscore_d = M_bscore_q;
    M_randrow_d = M_randrow_q;
    M_randcol_d = M_randcol_q;
    M_aaddscore_d = M_aaddscore_q;
    M_aapplescore_d = M_aapplescore_q;
    M_asubscore_d = M_asubscore_q;
    M_baddscore_d = M_baddscore_q;
    M_bapplescore_d = M_bapplescore_q;
    M_bsubscore_d = M_bsubscore_q;
    if (~joystickaLeft | ~joystickaUp | ~joystickaRight | ~joystickaDown) begin
      M_adirection_d[0+0-:1] = ~joystickaLeft;
      M_adirection_d[1+0-:1] = ~joystickaUp;
      M_adirection_d[2+0-:1] = ~joystickaRight;
      M_adirection_d[3+0-:1] = ~joystickaDown;
    end
    if (~joystickbLeft | ~joystickbUp | ~joystickbRight | ~joystickbDown) begin
      M_bdirection_d[0+0-:1] = ~joystickbLeft;
      M_bdirection_d[1+0-:1] = ~joystickbUp;
      M_bdirection_d[2+0-:1] = ~joystickbRight;
      M_bdirection_d[3+0-:1] = ~joystickbDown;
    end
    if (start) begin
      M_counter_d = 1'h0;
      M_arow_d[0+4-:5] = 4'hf;
      M_acol_d[0+5-:6] = 5'h14;
      M_brow_d[0+4-:5] = 5'h10;
      M_bcol_d[0+5-:6] = 6'h2b;
      for (count = 1'h1; count < 7'h40; count = count + 1) begin
        M_arow_d[(count)*5+4-:5] = 1'h0;
        M_acol_d[(count)*6+5-:6] = 1'h0;
        M_brow_d[(count)*5+4-:5] = 1'h0;
        M_bcol_d[(count)*6+5-:6] = 1'h0;
      end
      M_adirection_d = 4'h4;
      M_bdirection_d = 4'h1;
      M_alen_d = 4'h8;
      M_blen_d = 4'h8;
      M_alethal_d = 1'h0;
      M_blethal_d = 1'h0;
      M_randrow_d = M_pn_num[0+4-:5];
      M_randcol_d = M_pn_num[5+4-:5] + 5'h10;
      M_approw_d = M_randrow_q;
      M_appcol_d = M_randcol_q;
      M_lastaDirection_d = 2'h2;
      M_lastbDirection_d = 1'h0;
      M_move_d = 1'h1;
      M_aaddscore_d = 1'h0;
      M_aapplescore_d = 1'h0;
      M_asubscore_d = 1'h0;
      M_baddscore_d = 1'h0;
      M_bapplescore_d = 1'h0;
      M_bsubscore_d = 1'h0;
    end else begin
      if (~M_alethal_q && ~M_blethal_q) begin
        if (M_move_q) begin
          for (count = 1'h1; count < 7'h40; count = count + 1) begin
            if (M_alen_q > count) begin
              M_arow_d[(count)*5+4-:5] = M_arow_q[(count - 1'h1)*5+4-:5];
              M_acol_d[(count)*6+5-:6] = M_acol_q[(count - 1'h1)*6+5-:6];
            end
            if (M_blen_q > count) begin
              M_brow_d[(count)*5+4-:5] = M_brow_q[(count - 1'h1)*5+4-:5];
              M_bcol_d[(count)*6+5-:6] = M_bcol_q[(count - 1'h1)*6+5-:6];
            end
          end
          
          case (M_adirection_q)
            4'h1: begin
              if (M_lastaDirection_q != 2'h2) begin
                adir = 1'h0;
              end else begin
                adir = 2'h2;
              end
            end
            4'h2: begin
              adir = 1'h1;
              if (M_lastaDirection_q != 2'h3) begin
                adir = 1'h1;
              end else begin
                adir = 2'h3;
              end
            end
            4'h4: begin
              adir = 2'h2;
              if (M_lastaDirection_q != 1'h0) begin
                adir = 2'h2;
              end else begin
                adir = 1'h0;
              end
            end
            4'h8: begin
              adir = 2'h3;
              if (M_lastaDirection_q != 1'h1) begin
                adir = 2'h3;
              end else begin
                adir = 1'h1;
              end
            end
            4'h3: begin
              if (M_lastaDirection_q == 1'h0) begin
                adir = 1'h1;
              end else begin
                if (M_lastaDirection_q != 2'h2) begin
                  adir = 1'h0;
                end else begin
                  if (M_lastaDirection_q != 2'h3) begin
                    adir = 1'h1;
                  end else begin
                    adir = M_lastaDirection_q;
                  end
                end
              end
            end
            4'h6: begin
              if (M_lastaDirection_q == 1'h1) begin
                adir = 2'h2;
              end else begin
                if (M_lastaDirection_q != 2'h3) begin
                  adir = 1'h1;
                end else begin
                  if (M_lastaDirection_q != 1'h0) begin
                    adir = 2'h2;
                  end else begin
                    adir = M_lastaDirection_q;
                  end
                end
              end
            end
            4'hc: begin
              if (M_lastaDirection_q == 2'h2) begin
                adir = 2'h3;
              end else begin
                if (M_lastaDirection_q != 1'h0) begin
                  adir = 2'h2;
                end else begin
                  if (M_lastaDirection_q != 1'h1) begin
                    adir = 2'h3;
                  end else begin
                    adir = M_lastaDirection_q;
                  end
                end
              end
            end
            4'h9: begin
              if (M_lastaDirection_q == 2'h3) begin
                adir = 1'h0;
              end else begin
                if (M_lastaDirection_q != 1'h1) begin
                  adir = 2'h3;
                end else begin
                  if (M_lastaDirection_q != 2'h2) begin
                    adir = 1'h0;
                  end else begin
                    adir = M_lastaDirection_q;
                  end
                end
              end
            end
            default: begin
              adir = M_lastaDirection_q;
            end
          endcase
          M_lastaDirection_d = adir;
          
          case (adir)
            1'h0: begin
              M_acol_d[0+5-:6] = M_acol_q[0+5-:6] - 1'h1;
            end
            1'h1: begin
              M_arow_d[0+4-:5] = M_arow_q[0+4-:5] - 1'h1;
            end
            2'h2: begin
              M_acol_d[0+5-:6] = M_acol_q[0+5-:6] + 1'h1;
            end
            2'h3: begin
              M_arow_d[0+4-:5] = M_arow_q[0+4-:5] + 1'h1;
            end
          endcase
          
          case (M_bdirection_q)
            4'h1: begin
              if (M_lastbDirection_q != 2'h2) begin
                bdir = 1'h0;
              end else begin
                bdir = 2'h2;
              end
            end
            4'h2: begin
              bdir = 1'h1;
              if (M_lastbDirection_q != 2'h3) begin
                bdir = 1'h1;
              end else begin
                bdir = 2'h3;
              end
            end
            4'h4: begin
              bdir = 2'h2;
              if (M_lastbDirection_q != 1'h0) begin
                bdir = 2'h2;
              end else begin
                bdir = 1'h0;
              end
            end
            4'h8: begin
              bdir = 2'h3;
              if (M_lastbDirection_q != 1'h1) begin
                bdir = 2'h3;
              end else begin
                bdir = 1'h1;
              end
            end
            4'h3: begin
              if (M_lastbDirection_q == 1'h0) begin
                bdir = 1'h1;
              end else begin
                if (M_lastbDirection_q != 2'h2) begin
                  bdir = 1'h0;
                end else begin
                  if (M_lastbDirection_q != 2'h3) begin
                    bdir = 1'h1;
                  end else begin
                    bdir = M_lastbDirection_q;
                  end
                end
              end
            end
            4'h6: begin
              if (M_lastbDirection_q == 1'h1) begin
                bdir = 2'h2;
              end else begin
                if (M_lastbDirection_q != 2'h3) begin
                  bdir = 1'h1;
                end else begin
                  if (M_lastbDirection_q != 1'h0) begin
                    bdir = 2'h2;
                  end else begin
                    bdir = M_lastbDirection_q;
                  end
                end
              end
            end
            4'hc: begin
              if (M_lastbDirection_q == 2'h2) begin
                bdir = 2'h3;
              end else begin
                if (M_lastbDirection_q != 1'h0) begin
                  bdir = 2'h2;
                end else begin
                  if (M_lastbDirection_q != 1'h1) begin
                    bdir = 2'h3;
                  end else begin
                    bdir = M_lastbDirection_q;
                  end
                end
              end
            end
            4'h9: begin
              if (M_lastbDirection_q == 2'h3) begin
                bdir = 1'h0;
              end else begin
                if (M_lastbDirection_q != 1'h1) begin
                  bdir = 2'h3;
                end else begin
                  if (M_lastbDirection_q != 2'h2) begin
                    bdir = 1'h0;
                  end else begin
                    bdir = M_lastbDirection_q;
                  end
                end
              end
            end
            default: begin
              bdir = M_lastbDirection_q;
            end
          endcase
          M_lastbDirection_d = bdir;
          
          case (bdir)
            1'h0: begin
              M_bcol_d[0+5-:6] = M_bcol_q[0+5-:6] - 1'h1;
            end
            1'h1: begin
              M_brow_d[0+4-:5] = M_brow_q[0+4-:5] - 1'h1;
            end
            2'h2: begin
              M_bcol_d[0+5-:6] = M_bcol_q[0+5-:6] + 1'h1;
            end
            2'h3: begin
              M_brow_d[0+4-:5] = M_brow_q[0+4-:5] + 1'h1;
            end
          endcase
          M_move_d = 1'h0;
        end else begin
          if ((M_arow_q[0+4-:5] == M_approw_q) && (M_acol_q[0+5-:6] == M_appcol_q)) begin
            M_approw_d = M_randrow_q;
            M_appcol_d = M_randcol_q;
            M_aapplescore_d = M_aapplescore_q + 4'ha;
            if (M_alen_q < 8'h3c) begin
              M_alen_d = M_alen_q + 3'h4;
            end
          end else begin
            if ((M_arow_q[0+4-:5] == 1'h0) || (M_arow_q[0+4-:5] == 5'h1f) || (M_acol_q[0+5-:6] == 5'h10) || (M_acol_q[0+5-:6] == 6'h2f)) begin
              M_alethal_d = 1'h1;
              M_asubscore_d = M_asubscore_q + 3'h5;
            end else begin
              if (((|M_atop_q[1+62-:63] & M_atop_q[0+0-:1])) | ((|M_abot_q[1+62-:63] & M_abot_q[0+0-:1]))) begin
                M_alethal_d = 1'h1;
                M_asubscore_d = M_asubscore_q + 3'h5;
              end else begin
                if (((|M_btop_q[1+62-:63] & M_atop_q[0+0-:1])) | ((|M_bbot_q[1+62-:63] & M_abot_q[0+0-:1]))) begin
                  M_alethal_d = 1'h1;
                  M_asubscore_d = M_asubscore_q + 3'h5;
                  M_baddscore_d = M_baddscore_q + 4'hf;
                end
              end
            end
          end
          if ((M_brow_q[0+4-:5] == M_approw_q) && (M_bcol_q[0+5-:6] == M_appcol_q)) begin
            M_approw_d = M_randrow_q;
            M_appcol_d = M_randcol_q;
            M_bapplescore_d = M_bapplescore_q + 4'ha;
            if (M_blen_q < 8'h3c) begin
              M_blen_d = M_blen_q + 3'h4;
            end
          end else begin
            if ((M_brow_q[0+4-:5] == 1'h0) || (M_brow_q[0+4-:5] == 5'h1f) || (M_bcol_q[0+5-:6] == 5'h10) || (M_bcol_q[0+5-:6] == 6'h2f)) begin
              M_blethal_d = 1'h1;
              M_bsubscore_d = M_bsubscore_q + 3'h5;
            end else begin
              if (((|M_btop_q[1+62-:63] & M_btop_q[0+0-:1])) | ((|M_bbot_q[1+62-:63] & M_bbot_q[0+0-:1]))) begin
                M_blethal_d = 1'h1;
                M_bsubscore_d = M_bsubscore_q + 3'h5;
              end else begin
                if (((|M_atop_q[1+62-:63] & M_btop_q[0+0-:1])) | ((|M_abot_q[1+62-:63] & M_bbot_q[0+0-:1]))) begin
                  M_blethal_d = 1'h1;
                  M_bsubscore_d = M_bsubscore_q + 3'h5;
                  M_aaddscore_d = M_aaddscore_q + 4'hf;
                end
              end
            end
          end
          if ((M_brow_q[0+4-:5] == M_arow_q[0+4-:5]) & (M_acol_q[0+5-:6] == M_bcol_q[0+5-:6])) begin
            M_alethal_d = 1'h1;
            M_blethal_d = 1'h1;
            M_asubscore_d = M_asubscore_q + 3'h5;
            M_bsubscore_d = M_bsubscore_q + 3'h5;
          end
          if (((|M_atop_q[0+63-:64] & M_rtop_q)) | ((|M_abot_q[0+63-:64] & M_rbot_q)) | ((|M_btop_q[0+63-:64] & M_rtop_q)) | ((|M_bbot_q[0+63-:64] & M_rbot_q)) | (M_walltop_q & M_rtop_q) | (M_wallbot_q & M_rbot_q)) begin
            M_randrow_d = M_pn_num[0+4-:5];
            M_randcol_d = M_pn_num[5+4-:5] + 5'h10;
          end
        end
      end
    end
    M_rtop_d = ((row == M_randrow_q) & (col == M_randcol_q));
    M_rbot_d = ((row + 5'h10 == M_randrow_q) & (col == M_randcol_q));
    M_walltop_d = (((row == 1'h0) || (col == 5'h10) || (col == 6'h2f)) && ((col <= 6'h2f) && (col >= 5'h10)));
    M_wallbot_d = (((row + 5'h10 == 5'h1f) || (col == 5'h10) || (col == 6'h2f)) && ((col <= 6'h2f) && (col >= 5'h10)));
    M_appletop_d = (row == M_approw_q) & (col == M_appcol_q);
    M_applebot_d = (row + 5'h10 == M_approw_q) & (col == M_appcol_q);
    for (count = 1'h0; count < 7'h40; count = count + 1) begin
      M_atop_d[(count)*1+0-:1] = (row == M_arow_q[(count)*5+4-:5]) & (col == M_acol_q[(count)*6+5-:6]);
      M_abot_d[(count)*1+0-:1] = (row + 5'h10 == M_arow_q[(count)*5+4-:5]) & (col == M_acol_q[(count)*6+5-:6]);
      M_btop_d[(count)*1+0-:1] = (row == M_brow_q[(count)*5+4-:5]) & (col == M_bcol_q[(count)*6+5-:6]);
      M_bbot_d[(count)*1+0-:1] = (row + 5'h10 == M_brow_q[(count)*5+4-:5]) & (col == M_bcol_q[(count)*6+5-:6]);
    end
    
    case (M_counter_q)
      11'h7d0: begin
        M_alu_a = M_ascore_q;
        M_alu_b = M_aapplescore_q;
        M_alu_c = 6'h00;
        M_ascore_d = M_alu_out[0+7-:8];
        M_aapplescore_d = 1'h0;
      end
      11'h7d1: begin
        M_alu_a = M_ascore_q;
        M_alu_b = M_aaddscore_q;
        M_alu_c = 6'h00;
        M_ascore_d = M_alu_out[0+7-:8];
        M_aaddscore_d = 1'h0;
      end
      11'h7d2: begin
        M_alu_a = M_ascore_q;
        M_alu_b = M_asubscore_q;
        M_alu_c = 6'h01;
        M_ascore_d = M_alu_out[0+7-:8];
        M_asubscore_d = 1'h0;
      end
      11'h7d3: begin
        M_alu_a = M_ascore_q;
        M_alu_b = 8'h00;
        M_alu_c = 6'h35;
        M_cmp_d = M_alu_out[0+0-:1];
      end
      11'h7d4: begin
        if (M_cmp_q == 1'h1) begin
          M_ascore_d = 1'h0;
        end
      end
      11'h7d5: begin
        M_cmp_d = 1'h0;
      end
      11'h7d6: begin
        M_alu_a = M_bscore_q;
        M_alu_b = M_bapplescore_q;
        M_alu_c = 6'h00;
        M_bscore_d = M_alu_out[0+7-:8];
        M_bapplescore_d = 1'h0;
      end
      11'h7d7: begin
        M_alu_a = M_bscore_q;
        M_alu_b = M_baddscore_q;
        M_alu_c = 6'h00;
        M_bscore_d = M_alu_out[0+7-:8];
        M_baddscore_d = 1'h0;
      end
      11'h7d8: begin
        M_alu_a = M_bscore_q;
        M_alu_b = M_bsubscore_q;
        M_alu_c = 6'h01;
        M_bscore_d = M_alu_out[0+7-:8];
        M_bsubscore_d = 1'h0;
      end
      11'h7d9: begin
        M_alu_a = M_bscore_q;
        M_alu_b = 8'h00;
        M_alu_c = 6'h35;
        M_cmp_d = M_alu_out[0+0-:1];
      end
      11'h7da: begin
        if (M_cmp_q == 1'h1) begin
          M_bscore_d = 1'h0;
        end
      end
      11'h7db: begin
        M_cmp_d = 1'h0;
      end
    endcase
    aonetop = M_drawer_aonetop;
    aonebot = M_drawer_aonebot;
    atentop = M_drawer_atentop;
    atenbot = M_drawer_atenbot;
    bonetop = M_drawer_bonetop;
    bonebot = M_drawer_bonebot;
    btentop = M_drawer_btentop;
    btenbot = M_drawer_btenbot;
    if (col == 7'h40) begin
      latch = 1'h1;
    end else begin
      latch = 1'h0;
    end
    if (col < 5'h14 || col > 7'h42) begin
      blank = 1'h0;
    end else begin
      blank = 1'h1;
    end
    if (col < 7'h40) begin
      if (row == 1'h0) begin
        rowsel = 4'hf;
      end else begin
        rowsel = row - 1'h1;
      end
    end else begin
      rowsel = row[0+3-:4];
    end
    dclk = ~M_gclk_q[3+0-:1];
    if (start) begin
      M_appletop_d = 1'h0;
      M_applebot_d = 1'h0;
    end
    r0 = M_walltop_q | ((|M_appletop_q));
    g0 = M_walltop_q | ((|M_btop_q)) | bonetop | btentop;
    bl0 = M_walltop_q | ((|M_atop_q)) | aonetop | atentop;
    r1 = M_wallbot_q | ((|M_applebot_q));
    g1 = M_wallbot_q | ((|M_bbot_q)) | bonebot | btenbot;
    bl1 = M_wallbot_q | ((|M_abot_q)) | aonebot | atenbot;
    if ((row == 1'h0) && (col == 1'h1)) begin
      r0 = 1'h0;
      g0 = 1'h0;
      bl0 = 1'h0;
      r1 = 1'h0;
      g1 = 1'h0;
      bl1 = 1'h0;
    end
  end
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_bcol_q <= M_bcol_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gclk_q <= 1'h0;
    end else begin
      M_gclk_q <= M_gclk_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_rbot_q <= 1'h0;
    end else begin
      M_rbot_q <= M_rbot_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_baddscore_q <= 8'h00;
    end else begin
      M_baddscore_q <= M_baddscore_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_bdirection_q <= 4'h1;
    end else begin
      M_bdirection_q <= M_bdirection_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_blen_q <= M_blen_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_approw_q <= M_approw_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_applebot_q <= 1'h0;
    end else begin
      M_applebot_q <= M_applebot_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_randcol_q <= 1'h0;
    end else begin
      M_randcol_q <= M_randcol_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_adirection_q <= 4'h4;
    end else begin
      M_adirection_q <= M_adirection_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_asubscore_q <= 8'h00;
    end else begin
      M_asubscore_q <= M_asubscore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_arow_q <= M_arow_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (start == 1'b1) begin
      M_growclk_q <= 1'h0;
    end else begin
      M_growclk_q <= M_growclk_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_lastbDirection_q <= 2'h0;
    end else begin
      M_lastbDirection_q <= M_lastbDirection_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_lastaDirection_q <= 2'h2;
    end else begin
      M_lastaDirection_q <= M_lastaDirection_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_rtop_q <= 1'h0;
    end else begin
      M_rtop_q <= M_rtop_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_aapplescore_q <= 8'h00;
    end else begin
      M_aapplescore_q <= M_aapplescore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_aaddscore_q <= 8'h00;
    end else begin
      M_aaddscore_q <= M_aaddscore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_move_q <= M_move_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_brow_q <= M_brow_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_appletop_q <= 1'h0;
    end else begin
      M_appletop_q <= M_appletop_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_wallbot_q <= 1'h0;
    end else begin
      M_wallbot_q <= M_wallbot_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_atop_q <= 1'h0;
    end else begin
      M_atop_q <= M_atop_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_alen_q <= M_alen_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_bapplescore_q <= 8'h00;
    end else begin
      M_bapplescore_q <= M_bapplescore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_acol_q <= M_acol_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_walltop_q <= 1'h0;
    end else begin
      M_walltop_q <= M_walltop_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_randrow_q <= 1'h0;
    end else begin
      M_randrow_q <= M_randrow_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_bsubscore_q <= 8'h00;
    end else begin
      M_bsubscore_q <= M_bsubscore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_cmp_q <= M_cmp_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_bbot_q <= 1'h0;
    end else begin
      M_bbot_q <= M_bbot_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_bscore_q <= 8'h00;
    end else begin
      M_bscore_q <= M_bscore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_counter_q <= M_counter_d;
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_btop_q <= 1'h0;
    end else begin
      M_btop_q <= M_btop_d;
    end
  end
  
  
  always @(posedge M_gclk_q[15+0-:1]) begin
    if (start == 1'b1) begin
      M_sclk_q <= 19'h61a80;
    end else begin
      M_sclk_q <= M_sclk_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_alethal_q <= 1'h1;
    end else begin
      M_alethal_q <= M_alethal_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_blethal_q <= 1'h1;
    end else begin
      M_blethal_q <= M_blethal_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_ascore_q <= 8'h00;
    end else begin
      M_ascore_q <= M_ascore_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    if (rst == 1'b1) begin
      M_abot_q <= 1'h0;
    end else begin
      M_abot_q <= M_abot_d;
    end
  end
  
  
  always @(posedge M_gclk_q[3+0-:1]) begin
    M_appcol_q <= M_appcol_d;
  end
  
endmodule
