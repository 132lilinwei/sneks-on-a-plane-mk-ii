module process (
    input clk,  // clock
    input rst,  // reset
    input startbutton,
    input joystickaUp,
    input joystickaDown,
    input joystickaLeft,
    input joystickaRight,
    input joystickbUp,
    input joystickbDown,
    input joystickbLeft,
    input joystickbRight,
    input playeronebutton,
    input playertwobutton,
    input reset,
    output r0,
    output g0,
    output bl0,
    output r1,
    output g1,
    output bl1,
    output latch,
    output blank,
    output rowsel[4],
    output dclk,
    output startlight,
    output playeronelight,
    output playertwolight
  ) {
  
  const SPEED = 8; //HOW FAST TO RUN EACH ONE //ORIGINALLY 3
  const SCLK = 12500; //ORIGINALLY 400000
  const NXT = 7500; //ORIGINALLY 240000
  dff gclk[26](.clk(clk), .rst(rst), #INIT(0)); //GAME CLOCK
  dff growclk[25](.clk(gclk.q[SPEED]), .rst(startbutton), #INIT(0)); //GROW CLOCK
  dff sclk[20](.clk(gclk.q[SPEED + 9]), .rst(rst), #INIT(SCLK)); //SPEED CLOCK
  dff cclk[22](.clk(gclk.q[SPEED]), .rst(startbutton), #INIT(0)); //COUNTDOWN CLOCK
  dff countdown[2](.clk(gclk.q[SPEED]), .rst(startbutton), #INIT(3)); //COUNTDOWN NUMBER
  
  const GROWTH = 4;
  const APPLE = 7;
  const COLLIDE = 5;
  const KILL = 11;
  
  //CURRENT ROW AND COL
  
  //SNAKES
  dff arow[64][5](.clk(gclk.q[SPEED]));
  dff acol[64][6](.clk(gclk.q[SPEED]));
  dff brow[64][5](.clk(gclk.q[SPEED]));
  dff bcol[64][6](.clk(gclk.q[SPEED]));
  
  //SNAKE 1 BIT CHECKERS
  dff atop[64](.clk(gclk.q[SPEED]), .rst(rst));
  dff abot[64](.clk(gclk.q[SPEED]), .rst(rst));
  dff btop[64](.clk(gclk.q[SPEED]), .rst(rst));
  dff bbot[64](.clk(gclk.q[SPEED]), .rst(rst));
  
  //SNAKE SIZES
  dff alen[6](.clk(gclk.q[SPEED]));
  dff blen[6](.clk(gclk.q[SPEED]));
  dff agrow(.clk(gclk.q[SPEED]));
  dff bgrow(.clk(gclk.q[SPEED]));
  
  //SNAKE DEATHS
  dff alethal[1](.clk(gclk.q[SPEED]), .rst(rst), #INIT(1));
  dff blethal[1](.clk(gclk.q[SPEED]), .rst(rst), #INIT(1));
  
  //APPLE COORDINATES
  dff approw[5](.clk(gclk.q[SPEED]));
  dff appcol[6](.clk(gclk.q[SPEED]));
  
  //ELEMENTS
  dff walltop(.clk(gclk.q[SPEED]), .rst(rst));
  dff wallbot(.clk(gclk.q[SPEED]), .rst(rst));
  dff appletop(.clk(gclk.q[SPEED]), .rst(rst));
  dff applebot(.clk(gclk.q[SPEED]), .rst(rst));
  dff rtop(.clk(gclk.q[SPEED]), .rst(rst));
  dff rbot(.clk(gclk.q[SPEED]), .rst(rst));
  
  //DIRECTIONS
  dff adirection[4](.clk(clk), .rst(rst), #INIT(b0100)); //INDEX 0 = LEFT, 1 = UP, 2 = RIGHT, 3 = DOWN so {0011} is up and left diagonally
  dff bdirection[4](.clk(clk), .rst(rst), #INIT(b0001)); //INDEX 0 = LEFT, 1 = UP, 2 = RIGHT, 3 = DOWN
  
  dff lastaDirection[2](.clk(gclk.q[SPEED]), .rst(rst), #INIT(b10)); // 0 = LEFT, 1 = UP, 2 = RIGHT, 3 = DOWN
  dff lastbDirection[2](.clk(gclk.q[SPEED]), .rst(rst), #INIT(b00));
  
  sig adir[2];
  sig bdir[2];
 
  //SCORE ELEMENTS
  dff ascore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff bscore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff aaddscore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff baddscore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff aapplescore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff bapplescore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff asubscore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  dff bsubscore[8](.clk(gclk.q[SPEED]), .rst(rst), #INIT(8b0));
  
  //VAR 
  dff playera(.clk(gclk.q[SPEED]), .rst(rst), #INIT(0));
  dff playerb(.clk(gclk.q[SPEED]), .rst(rst), #INIT(0));
  dff counter[20](.clk(gclk.q[SPEED]));
  var count;
  dff move(.clk(gclk.q[SPEED]));
  sig row[4];
  sig col[7];
  dff randrow[5](.clk(gclk.q[SPEED]), .rst(rst));
  dff randcol[6](.clk(gclk.q[SPEED]), .rst(rst));
  dff cmp[1](.clk(gclk.q[SPEED]));
  
  //SCORE SIGNALS
  sig aonetop;
  sig aonebot;
  sig atentop;
  sig atenbot;
  sig bonetop;
  sig bonebot;
  sig btentop;
  sig btenbot;
  
  //COUNTDOWN SIGNALS
  sig cdtop;
  sig cdbot;
  
  //PLAYER SELECT SIGNALS
  sig player1;
  sig player2;
  sig playerlinetop;
  sig playerlinebot;
  sig ready;
  
  //TITLE SCREEN SIGNALS
  sig sneks;
  sig plane;
  
  //EDGE DETECTORS
  edge_detector start(.clk(gclk.q[SPEED]), #RISE(1), #FALL(0));
  edge_detector playerone(.clk(gclk.q[SPEED]), #RISE(1), #FALL(0));
  edge_detector playertwo(.clk(gclk.q[SPEED]), #RISE(1), #FALL(0));
  button_conditioner startb(.clk(clk));
  button_conditioner playeroneb(.clk(clk));
  button_conditioner playertwob(.clk(clk));
  
  //STATE MACHINE
  fsm state(.clk(gclk.q[SPEED]), #INIT(TITLE)) = {TITLE, PLAYERSELECT, RESETGAME, STARTGAME, COUNTDOWN, RUN, DEAD, GAMEOVER, STOP};
  
  //MODULES
  control control;
  alu alu;
  pn_gen pn;
  drawer drawer;
  countdowndisp countdowndisp;
  playerselect playerselect;
  title title;
  gameover gameover;
  
  always {
    gclk.d = gclk.q + 1;
    growclk.d = growclk.q + 1;
    counter.d = counter.q + 1;
    if(sclk.q > 5) sclk.d = sclk.q - 1;
    else sclk.d = sclk.q;
    
    /*
    BUTTON CONDITIONER INPUTS
    */
    startb.in = startbutton;
    playeroneb.in = playeronebutton;
    playertwob.in = playertwobutton;
    
    /*
    EDGE DETECTOR INPUTS
    */
    start.in = startb.out;
    playerone.in = playeroneb.out;
    playertwo.in = playertwob.out;
    
    /*
    COUNTDOWN CONTROLLER
    */
    cclk.d = cclk.q + 1;
    if (cclk.q == NXT * 4){ //ORIGINALLY 1000000
      cclk.d = 0;
      countdown.d = countdown.q - 1;
    }
    
    /*
    DEFAULT DISPLAY OUTPUTS
    */
    r0 = 0;
    g0 = 0;
    bl0 = 0;
    r1 = 0;
    g1 = 0;
    bl1 = 0;
    startlight = 0;
    playeronelight = 0;
    playertwolight = 0;
    
    control.clk = gclk.q[SPEED];
    control.rst = rst;
    row = control.rowOut;
    col = control.colOut;
    
    pn.clk = clk;
    pn.rst = rst;
    pn.seed = 0;
    pn.next = 1;
    
    alu.a = b0;
    alu.b = b0;
    alu.c = b0;
    
    drawer.row = row;
    drawer.col = col;
    drawer.ascore = ascore.q;
    drawer.bscore = bscore.q;
    
    countdowndisp.row = row;
    countdowndisp.col = col;
    countdowndisp.number = countdown.q;
    
    playerselect.row = row;
    playerselect.col = col;
    playerselect.playera = playera.q;
    playerselect.playerb = playerb.q;
    
    gameover.row = row;
    gameover.col = col;
    gameover.ascore = ascore.q;
    gameover.bscore = bscore.q;
    
    title.row = row;
    title.col = col;
    
    alethal.d = alethal.q;
    blethal.d = blethal.q;
    
    ascore.d = ascore.q;
    bscore.d = bscore.q;
    
    randrow.d = randrow.q;
    randcol.d = randcol.q;
    
    playera.d = playera.q;
    playerb.d = playerb.q;
    
    alen.d = alen.q;
    blen.d = blen.q;
    
    aaddscore.d = aaddscore.q;
    aapplescore.d = aapplescore.q;
    asubscore.d = asubscore.q;
    baddscore.d = baddscore.q;
    bapplescore.d = bapplescore.q;
    bsubscore.d = bsubscore.q;
    
    lastaDirection.d = lastaDirection.q;
    lastbDirection.d = lastbDirection.q;
    
    adirection.d = adirection.q;
    bdirection.d = bdirection.q;
    
    /*
    GAME TIME CONTROL
    */
    if ((counter.q >= NXT) && (counter.q > sclk.q)){
      move.d = 1;
      counter.d = 0;
      aaddscore.d = 0;
      aapplescore.d = 0;
      asubscore.d = 0;
      baddscore.d = 0;
      bapplescore.d = 0;
      bsubscore.d = 0;
      agrow.d = 0;
      bgrow.d = 0;
    }
    else{
      move.d = 0;
    }

    //JOYSTICK INPUT 
    if(~joystickaLeft | ~joystickaUp | ~joystickaRight | ~joystickaDown){
      adirection.d[0] = ~joystickaLeft;
      adirection.d[1] = ~joystickaUp;
      adirection.d[2] = ~joystickaRight;
      adirection.d[3] = ~joystickaDown;
    }
    if(~joystickbLeft | ~joystickbUp | ~joystickbRight | ~joystickbDown){
      bdirection.d[0] = ~joystickbLeft;
      bdirection.d[1] = ~joystickbUp;
      bdirection.d[2] = ~joystickbRight;
      bdirection.d[3] = ~joystickbDown;
    }
    
    if (state.q == state.TITLE){
      playera.d = 1;
      playerb.d = 1;
      alethal.d = 0;
      blethal.d = 0;
      startlight = gclk.q[25];
      sclk.d = 5;
      alen.d = 63;
      blen.d = 63;
      if(start.out){
        state.d = state.PLAYERSELECT;
        playera.d = 0;
        playerb.d = 0;
      }
    }    
    if (state.q == state.PLAYERSELECT){
      sclk.d = SCLK; //RESET MOVEMENT SPEED
      if(playerone.out) playera.d = ~playera.q;
      if(playertwo.out) playerb.d = ~playerb.q;
      playeronelight = ~gclk.q[25] | playera.q;
      playertwolight = gclk.q[25] | playerb.q;
      startlight = gclk.q[25] & (playerb.q | playera.q);
      if(start.out && (playera.q | playerb.q)) state.d = state.RESETGAME;
    }
    /*****
    INITIALISATION (RESET SCORE)
    ****/
    if (state.q == state.RESETGAME){
      ascore.d = 0;
      bscore.d = 0;
      sclk.d = SCLK; //RESET MOVEMENT SPEED
      alen.d = 8; //RESET SNEK LENGTHS
      blen.d = 8;
      growclk.d = 0;
      playeronelight = playera.q;
      playertwolight = playerb.q;
      state.d = state.STARTGAME;
    }
    /*****
    AFTER DEATH INITIALISATION (DON'T RESET SCORE OR MOVEMENT SPEED)
     *****/
    if (state.q == state.STARTGAME){
      countdown.d = 3;
      cclk.d = 0;
      playeronelight = playera.q;
      playertwolight = playerb.q;
      state.d = state.COUNTDOWN;
    }
    if (state.q == state.COUNTDOWN){
      sclk.d = sclk.q;
      playeronelight = playera.q;
      playertwolight = playerb.q;
      counter.d = 0;
      arow.d[0] = 15;
      acol.d[0] = 20;
      brow.d[0] = 16;
      bcol.d[0] = 43;
      for(count = 1; count < 64; count++){
        arow.d[count] = 0;
        acol.d[count] = 0;
        brow.d[count] = 0;
        bcol.d[count] = 0;
      }
      alethal.d = 0;
      blethal.d = 0;
      randrow.d = pn.num[4:0];
      randcol.d = pn.num[9:5] + 16;
      approw.d = randrow.q;
      appcol.d = randcol.q;
      lastaDirection.d = 2;
      lastbDirection.d = 0;
      adirection.d = b0100;
      bdirection.d = b0001;
      move.d = 1;
      aaddscore.d = 0;
      aapplescore.d = 0;
      asubscore.d = 0;
      baddscore.d = 0;
      bapplescore.d = 0;
      bsubscore.d = 0;
      if(countdown.q == 0){
        state.d = state.RUN;
      }
    }
    /*****
    MOVE BEGIN
    *****/
    if(state.q == state.RUN || state.q == state.DEAD || state.q == state.TITLE){
      playeronelight = playera.q;
      playertwolight = playerb.q;
      
      if(~alethal.q && ~blethal.q){
        if (move.q){
          for(count = 1; count < 64; count++){
            //MOVE A BODY ELEMENTS
            if(alen.q >= count){
              arow.d[count] = arow.q[count - 1];
              acol.d[count] = acol.q[count - 1];
            }
            //MOVE B BODY ELEMENTS
            if(blen.q >= count){
              brow.d[count] = brow.q[count - 1];
              bcol.d[count] = bcol.q[count - 1];
            }
          }
          
          //DEFINE A DIRECTION
          case(adirection.q){
            b0001: //SIDES
              if(lastaDirection.q != 2) adir = 0;
              else adir = 2;
            b0010:
              if(lastaDirection.q != 3) adir = 1;
              else adir = 3;
            b0100: 
              if(lastaDirection.q != 0) adir = 2;
              else adir = 0;
            b1000: 
              if(lastaDirection.q != 1) adir = 3;
              else adir = 1;
            b0011: //DIAGONALS
    				  if(lastaDirection.q == 0) adir = 1;
    				  else if(lastaDirection.q != 2) adir = 0;
    				  else if(lastaDirection.q != 3) adir = 1;
    				  else adir = lastaDirection.q;
            b0110:
    				  if(lastaDirection.q == 1) adir = 2;
    				  else if(lastaDirection.q != 3) adir = 1;
    				  else if(lastaDirection.q != 0) adir = 2;
    				  else adir = lastaDirection.q;
            b1100:
    				  if(lastaDirection.q == 2) adir = 3;
    				  else if(lastaDirection.q != 0) adir = 2;
    				  else if(lastaDirection.q != 1) adir = 3;
    				  else adir = lastaDirection.q;
            b1001:
    				  if(lastaDirection.q == 3) adir = 0;
    				  else if(lastaDirection.q != 1) adir = 3;
    				  else if(lastaDirection.q != 2) adir = 0;
    				  else adir = lastaDirection.q;
            default: adir = lastaDirection.q;
          }
          lastaDirection.d = adir;
          //MOVE A HEAD
          case(adir){
            0: acol.d[0] = acol.q[0] - 1;
            1: arow.d[0] = arow.q[0] - 1;
            2: acol.d[0] = acol.q[0] + 1;
            3: arow.d[0] = arow.q[0] + 1;
          }
          
          
          //DEFINE B DIRECTION
          case(bdirection.q){
            b0001: //SIDES
              if(lastbDirection.q != 2) bdir = 0;
              else bdir = 2;
            b0010: 
              if(lastbDirection.q != 3) bdir = 1;
              else bdir = 3;
            b0100: 
              if(lastbDirection.q != 0) bdir = 2;
              else bdir = 0;
            b1000: 
              if(lastbDirection.q != 1) bdir = 3;
              else bdir = 1;
            b0011: //DIAGONALS
              if(lastbDirection.q == 0) bdir = 1;
              else if(lastbDirection.q != 2) bdir = 0;
              else if(lastbDirection.q != 3) bdir = 1;
              else bdir = lastbDirection.q;
            b0110:
              if(lastbDirection.q == 1) bdir = 2;
              else if(lastbDirection.q != 3) bdir = 1;
              else if(lastbDirection.q != 0) bdir = 2;
              else bdir = lastbDirection.q;
            b1100:
              if(lastbDirection.q == 2) bdir = 3;
              else if(lastbDirection.q != 0) bdir = 2;
              else if(lastbDirection.q != 1) bdir = 3;
              else bdir = lastbDirection.q;
            b1001:
              if(lastbDirection.q == 3) bdir = 0;
              else if(lastbDirection.q != 1) bdir = 3;
              else if(lastbDirection.q != 2) bdir = 0;
              else bdir = lastbDirection.q;
            default: bdir = lastbDirection.q;
          }
          lastbDirection.d = bdir;
          //MOVE B HEAD
          case(bdir){
            0: bcol.d[0] = bcol.q[0] - 1;
            1: brow.d[0] = brow.q[0] - 1;
            2: bcol.d[0] = bcol.q[0] + 1;
            3: brow.d[0] = brow.q[0] + 1;
          }
          
          move.d = 0;
          
        }
      }
      /*****
      MOVE END
      *****/
         
      /*****
      CHECK IF CURRENT ROW AND COLUMN IS ON A HEAD/BODY
      *****/
      for(count = 0; count < 64; count++){
        atop.d[count] = (row == arow.q[count]) & (col == acol.q[count]);
        abot.d[count] = (row + 16 == arow.q[count]) & (col == acol.q[count]);
        btop.d[count] = (row == brow.q[count]) & (col == bcol.q[count]);
        bbot.d[count] = (row + 16 == brow.q[count]) & (col == bcol.q[count]);
      }
      
      /*****
      CHECK COLLISIONS
      *****/
      if(state.q != state.TITLE){
        //CHECK A COLLISIONS
        if (~alethal.q & playera.q){
          //CHECK A COLLIDE WITH APPLE
          if((arow.q[0] == approw.q) && (acol.q[0] == appcol.q)){
            approw.d = randrow.q;
            appcol.d = randcol.q;
            aapplescore.d = APPLE;
            if(~agrow.q) agrow.d = 1;
          }
          //CHECK A COLLIDE WITH BORDER
          else if ((arow.q[0] == 0) || (arow.q[0] == 31) || (acol.q[0] == 16) || (acol.q[0] == 47)){
            alethal.d = 1;
            state.d = state.DEAD;
            asubscore.d = COLLIDE;
          }
          //CHECK A COLLIDE WITH SELF
          else if ((|atop.q[63:1] & atop.q[0]) | (|abot.q[63:1] & abot.q[0])){
            alethal.d = 1;
            state.d = state.DEAD;
            asubscore.d = COLLIDE;
          }
          //CHECK A COLLIDE WITH B
          else if ((|btop.q[63:1] & atop.q[0]) | (|bbot.q[63:1] & abot.q[0])){
            alethal.d = 1;
            state.d = state.DEAD;
            asubscore.d = COLLIDE;
            baddscore.d = KILL;
          }
          
          //CHECK A HEAD COLLIDE WITH B HEAD
          if((brow.q[0] == arow.q[0]) & (acol.q[0] == bcol.q[0])){
            alethal.d = 1;
            aapplescore.d = 0;
            bapplescore.d = 0;
            state.d = state.DEAD;
            asubscore.d = COLLIDE;
            bsubscore.d = COLLIDE;
          }
        }
        //CHECK B COLLISIONS
        if (~blethal.q & playerb.q){
          //CHECK B COLLIDE WITH APPLE
          if((brow.q[0] == approw.q) && (bcol.q[0] == appcol.q)){
            approw.d = randrow.q;
            appcol.d = randcol.q;
            bapplescore.d = APPLE;
            if(~bgrow.q) bgrow.d = 1;
          }
          //CHECK B COLLIDE WITH BORDER
          else if ((brow.q[0] == 0) || (brow.q[0] == 31) || (bcol.q[0] == 16) || (bcol.q[0] == 47)){
            blethal.d = 1;
            state.d = state.DEAD;
            bsubscore.d = COLLIDE;
          }
          //CHECK B COLLIDE WITH SELF
          else if ((|btop.q[63:1] & btop.q[0]) | (|bbot.q[63:1] & bbot.q[0])){
            blethal.d = 1;
            state.d = state.DEAD;
            bsubscore.d = COLLIDE;
          }
          //CHECK B COLLIDE WITH A
          else if ((|atop.q[63:1] & btop.q[0]) | (|abot.q[63:1] & bbot.q[0])){
            blethal.d = 1;
            state.d = state.DEAD;
            bsubscore.d = COLLIDE;
            aaddscore.d = KILL;
          }
          
          //CHECK A HEAD COLLIDE WITH B HEAD
          if((brow.q[0] == arow.q[0]) & (acol.q[0] == bcol.q[0])){
            blethal.d = 1;
            aapplescore.d = 0;
            bapplescore.d = 0;
            state.d = state.DEAD;
            asubscore.d = COLLIDE;
            bsubscore.d = COLLIDE;
          }
        }
      
        //CHECK APPLE GENERATION
        if((|atop.q[63:0] & rtop.q) | (|abot.q[63:0] & rbot.q) | (|btop.q[63:0] & rtop.q) | (|bbot.q[63:0] & rbot.q) | (walltop.q & rtop.q) | (wallbot.q & rbot.q)){ //IF APPLE INTERSECTS ANY OF THESE
          randrow.d = pn.num[4:0];
          randcol.d = pn.num[9:5] + 16;
        }
        
        //CHECK IF APPLE INTERSECTS ANYTHING
        if((|atop.q[63:1] & appletop.q) | (|abot.q[63:1] & applebot.q) | (|btop.q[63:1] & appletop.q) | (|bbot.q[63:1] & applebot.q) | (walltop.q & appletop.q) | (wallbot.q * applebot.q)){
          approw.d = randrow.q;
          appcol.d = randcol.q;
        } 
         
        /*****
        CHECK IF RANDROW AND RANDCOL FALL INTO THIS CELL
        *****/
        rtop.d = ((row == randrow.q) & (col == randcol.q));
        rbot.d = ((row + 16 == randrow.q) & (col == randcol.q));
        
        /*****
        CHECK IF CURRENT ROW AND COLUMN IS ON AN APPLE
        *****/
        appletop.d = (row == approw.q) & (col == appcol.q);
        applebot.d = (row + 16 == approw.q) & (col == appcol.q);
        
        /*****
        ALU FUNCTIONS
        *****/
        case(counter.q){
          2000: //ADD A APPLE SCORE               // GIVE AT LEAST 16ROWS * 64COL OF TIME FOR IT TO CHECK ALL CELLS
            alu.a = ascore.q;
            alu.b = aapplescore.q;
            alu.c = b000000;
            ascore.d = alu.out[7:0];
            aapplescore.d = 0;
          2001: //ADD A KILL SCORE
            alu.a = ascore.q;
            alu.b = aaddscore.q;
            alu.c = b000000;
            if(~alethal.q) ascore.d = alu.out[7:0];
            aaddscore.d = 0;
          2002: //SUBTRACT A COLLIDE SCORE
            alu.a = ascore.q;
            alu.b = asubscore.q;
            alu.c = b000001;
            ascore.d = alu.out[7:0];
            asubscore.d = 0;
          2003: //CHECK IF A SCORE IS < 0
            alu.a = ascore.q;
            alu.b = b00000000;
            alu.c = b110101;
            cmp.d = alu.out[0];
          2004:
            if(cmp.q == 1) ascore.d = 0;
            cmp.d = 0; //reset compare
          2005: //ADD B APPLE SCORE
            alu.a = bscore.q;
            alu.b = bapplescore.q;
            alu.c = b000000;
            bscore.d = alu.out[7:0];
            bapplescore.d = 0;
          2006: //ADD B KILL SCORE
            alu.a = bscore.q;
            alu.b = baddscore.q;
            alu.c = b000000;
            if(~blethal.q) bscore.d = alu.out[7:0];
            baddscore.d = 0;
          2007: //SUBTRACT B COLLIDE SCORE
            alu.a = bscore.q;
            alu.b = bsubscore.q;
            alu.c = b000001;
            bscore.d = alu.out[7:0];
            bsubscore.d = 0;
          2008: //CHECK IF B SCORE IS < 0
            alu.a = bscore.q;
            alu.b = b00000000;
            alu.c = b110101;
            cmp.d = alu.out[0];
          2009:
            if(cmp.q == 1) bscore.d = 0;
            cmp.d = 0; //reset compare
          2010: //CHECK IF A SCORE IS > 99
            alu.a = 99;
            alu.b = ascore.q;
            alu.c = b110111;
            cmp.d = alu.out[0];
          2011:
            if(cmp.q == 1){
              ascore.d = 99;
              if(playera.q) state.d = state.GAMEOVER; //END GAME
            }
            cmp.d = 0;
          2012: //CHECK IF B SCORE IS > 99
            alu.a = 99;
            alu.b = bscore.q;
            alu.c = b110111;
            cmp.d = alu.out[0];
          2013:
            if(cmp.q == 1){
              bscore.d = 99;
              if(playerb.q) state.d = state.GAMEOVER; //END GAME
            }
            cmp.d = 0;
          2014: //ADD LENGTHS
            if(agrow.q){
              if(alen.q > 63 - GROWTH) alen.d = 63;
              else alen.d = alen.q + GROWTH;
              agrow.d = 0;
            }
            if(bgrow.q){
              if(blen.q > 63 - GROWTH) blen.d = 63;
              else blen.d = blen.q + GROWTH;
              bgrow.d = 0;
            }
          2015:
            if(state.q == state.DEAD) state.d = state.STARTGAME;
        }
        
        
        if(growclk.q[24] && counter.q != 2014){
          if (alen.q < 63) alen.d = alen.q + 1;
          if (blen.q < 63) blen.d = blen.q + 1;
          growclk.d = 0;
        }
        if(~playera.q){
          alen.d = 0;
          for(count = 0; count < 64; count++){
            arow.d[count] = 0;
            acol.d[count] = 0;
          }
          alethal.d = 0;
          aaddscore.d = 0;
          aapplescore.d = 0;
          asubscore.d = 0;
        }
        if(~playerb.q){
          blen.d = 0;
          for(count = 0; count < 64; count++){
            brow.d[count] = 0;
            bcol.d[count] = 0;
          }
          blethal.d = 0;
          baddscore.d = 0;
          bapplescore.d = 0;
          bsubscore.d = 0;
        }
      }
    }
    if(state.q == state.GAMEOVER){
      startlight = gclk.q[25];
      if(start.out){
        state.d = state.TITLE;
        counter.d = 0;
        arow.d[0] = 26;
        acol.d[0] = 20;
        brow.d[0] = 28;
        bcol.d[0] = 43;
        for(count = 1; count < 64; count++){
          arow.d[count] = 0;
          acol.d[count] = 0;
          brow.d[count] = 0;
          bcol.d[count] = 0;
        }
        alethal.d = 0;
        blethal.d = 0;
        lastaDirection.d = 2;
        lastbDirection.d = 0;
        adirection.d = b0100;
        bdirection.d = b0001;
        alen.d = 63;
        blen.d = 63;
      }
    }
    
    
    /*****
    CHECK IF CURRENT ROW AND COLUMN IS ON A BORDER
    *****/
    walltop.d = (((row == 0) || (col == 16) || (col == 47)) && ((col <= 47) && (col >= 16)));
    wallbot.d = (((row + 16 == 31) || (col == 16) || (col == 47)) && ((col <= 47) && (col >= 16)));
    
    /*****
    CHECK IF CURRENT CELL HAS SCORE ELEMENT
    *****/
    aonetop = drawer.aonetop;
    aonebot = drawer.aonebot;
    atentop = drawer.atentop;
    atenbot = drawer.atenbot;
    bonetop = drawer.bonetop;
    bonebot = drawer.bonebot;
    btentop = drawer.btentop;
    btenbot = drawer.btenbot;
    
    /*****
    CHECK IF CURRENT CELL HAS COUNTDOWN ELEMENT
    *****/
    cdtop = countdowndisp.cdtop;
    cdbot = countdowndisp.cdbot;
    
    /*****
    CHECK IF CURRENT CELL HAS PLAYER SELECT ELEMENT
    *****/
    player1 = playerselect.aout;
    player2 = playerselect.bout;
    playerlinetop = playerselect.lineouttop;
    playerlinebot = playerselect.lineoutbot;
    ready = playerselect.readyout;
    
    /*****
    CHECK IF CURRENT CELL HAS TITLE ELEMENT
    *****/
    sneks = title.sneksout;
    plane = title.planeout;
    
    /*****
    DISPLAY CONTROLLER
    *****/
    if(col == 64) latch = 1;
    else latch = 0;
    
    if(col < 5 || col > 75) blank = 0;
    else blank = 1;
    
    if(col < 65){
      rowsel = row - 1;
    }
    else rowsel = row[3:0];
    
    dclk = ~gclk.q[SPEED];
    
    
    if (~playera.q){
      aonetop = 0;
      atentop = 0;
      aonebot = 0;
      atenbot = 0;
      alethal.d = 0;
    }
    if (~playerb.q){
      bonetop = 0;
      btentop = 0;
      bonebot = 0;
      btenbot = 0;
      blethal.d = 0;
    }
    
    //DISPLAY OUT
    if (state.q == state.RUN || state.q == state.DEAD || state.q == state.GAMEOVER){
      r0 = walltop.q | (|appletop.q);
      g0 = walltop.q | (|btop.q) | bonetop | btentop | gameover.playerbout;
      bl0 = walltop.q | (|atop.q) | aonetop | atentop | gameover.playeraout;
      r1 = wallbot.q | (|applebot.q) | gameover.winout;
      g1 = wallbot.q | (|bbot.q) | bonebot | btenbot;
      bl1 = wallbot.q | (|abot.q) | aonebot | atenbot;
    }
    if (state.q == state.PLAYERSELECT){
      r0 = playerlinetop;
      g0 = playerlinetop | player2;
      bl0 = playerlinetop | player1;
      r1 = playerlinebot | ready;
      g1 = playerlinebot;
      bl1 = playerlinebot;
    }
    if (state.q == state.STARTGAME){
      r0 = walltop.q;
      g0 = walltop.q | bonetop | btentop;
      bl0 = walltop.q | aonetop | atentop;
      r1 = wallbot.q;
      g1 = wallbot.q | bonebot | btenbot;
      bl1 = wallbot.q | aonebot | atenbot;
    }
    if (state.q == state.COUNTDOWN){
      r0 = walltop.q | cdtop;
      g0 = walltop.q | bonetop | btentop;
      bl0 = walltop.q | aonetop | atentop;
      r1 = wallbot.q | cdbot;
      g1 = wallbot.q | bonebot | btenbot;
      bl1 = wallbot.q | aonebot | atenbot;
    }
    if (state.q == state.TITLE){
      r0 = sneks;
      g0 = (|btop.q);
      bl0 = (|atop.q);
      r1 = plane;
      g1 = plane | (|bbot.q);
      bl1 = plane | (|abot.q);
      playeronelight = 0;
      playertwolight = 0;
      startlight = gclk.q[25];
    }
    if((row == 0) && (col == 1 || col == 0)){
      r0 = 0;
      g0 = 0;
      bl0 = 0;
      r1 = 0;
      g1 = 0;
      bl1 = 0;
    }
    
    if(reset){
      state.d = state.TITLE;
      counter.d = 0;
      arow.d[0] = 26;
      acol.d[0] = 20;
      brow.d[0] = 28;
      bcol.d[0] = 43;
      for(count = 1; count < 64; count++){
        arow.d[count] = 0;
        acol.d[count] = 0;
        brow.d[count] = 0;
        bcol.d[count] = 0;
      }
      alethal.d = 0;
      blethal.d = 0;
      lastaDirection.d = 2;
      lastbDirection.d = 0;
      adirection.d = b0100;
      bdirection.d = b0001;
      alen.d = 63;
      blen.d = 63;
    }
  }
}
